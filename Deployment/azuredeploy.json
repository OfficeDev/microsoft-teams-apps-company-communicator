{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "userClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the user bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "userClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the user bot Azure AD app."
      }
    },
    "authorClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the author bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "authorClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the author bot Azure AD app."
      }
    },
    "senderUPNList": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Semicolon-delimited list of the user principal names (UPNs) allowed to send messages."
      }
    },
    "ProactivelyInstallUserApp": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "If proactive app installation should be enabled."
      }
    },
    "UserAppExternalId": {
      "defaultValue": "148a66bb-e83d-425a-927d-09f4299a9274",
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "User app external ID."
      }
    },
    "DefaultCulture": {
      "defaultValue": "en-US",
      "allowedValues": [
        "ar-SA",
        "de-DE",
        "en-US",
        "es-ES",
        "fr-FR",
        "he-IL",
        "ja-JP",
        "ko-KR",
        "pt-BR",
        "ru-RU",
        "zh-CN",
        "zh-TW"
      ],
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "Default culture."
      }
    },
    "SupportedCultures": {
      "defaultValue": "ar-SA,de-DE,en-US,es-ES,fr-FR,he-IL,ja-JP,ko-KR,pt-BR,ru-RU,zh-CN,zh-TW",
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "Comma-delimited list of the supported cultures."
      }
    },
    "customDomainOption": {
      "type": "string",
      "allowedValues": [
        "Custom domain name (recommended)",
        "Azure Front Door"
      ],
      "defaultValue": "Azure Front Door",
      "metadata": {
        "description": "How the app will be hosted on a domain that is not *.azurewebsites.net. Azure Front Door is an easy option that the template can set up automatically, but it comes with ongoing monthly costs. "
      }
    },
    "appDisplayName": {
      "type": "string",
      "defaultValue": "Company Communicator",
      "minLength": 1,
      "metadata": {
        "description": "The app (and bot) display name."
      }
    },
    "appDescription": {
      "type": "string",
      "defaultValue": "Broadcast messages to multiple teams and people in one go",
      "minLength": 1,
      "metadata": {
        "description": "The app (and bot) description."
      }
    },
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://raw.githubusercontent.com/OfficeDev/microsoft-teams-company-communicator-app/master/Manifest/color.png",
      "metadata": {
        "description": "The link to the icon for the app. It must resolve to a PNG file."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "hostingPlanSku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "hostingPlanSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1",
      "metadata": {
        "description": "The size of the hosting plan (small, medium, or large)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      },
      "defaultValue": "https://github.com/OfficeDev/microsoft-teams-apps-company-communicator"
    },
    "gitBranch": {
      "type": "string",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      },
      "defaultValue": "master"
    },
    "releaseTag": {
      "type": "string",
      "metadata": {
        "description": "The release to deploy."
      },
      "defaultValue": "latest"
    }
  },
  "variables": {
    "botName": "[parameters('baseResourceName')]",
    "authorBotName": "[concat(parameters('baseResourceName'), '-author')]",
    "botAppName": "[parameters('baseResourceName')]",
    "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
    "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
    "hostingPlanName": "[parameters('baseResourceName')]",
    "storageAccountName": "[uniquestring(concat(resourceGroup().id, parameters('baseResourceName')))]",
    "appInsightsName": "[parameters('baseResourceName')]",
    "prepFunctionAppName": "[concat(parameters('baseResourceName'), '-prep-function')]",
    "sendFunctionAppName": "[concat(parameters('baseResourceName'), '-function')]",
    "dataFunctionAppName": "[concat(parameters('baseResourceName'), '-data-function')]",
    "serviceBusNamespaceName": "[parameters('baseResourceName')]",
    "serviceBusSendQueueName": "company-communicator-send",
    "serviceBusDataQueueName": "company-communicator-data",
    "serviceBusPrepareToSendQueueName": "company-communicator-prep",
    "serviceBusExportQueueName": "company-communicator-export",
    "defaultSASKeyName": "RootManageSharedAccessKey",
    "authRuleResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusNamespaceName'), variables('defaultSASKeyName'))]",
    "sharedSkus": [
      "Free",
      "Shared"
    ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('hostingPlanSku'))]",
    "skuFamily": "[if(equals(parameters('hostingPlanSku'), 'Shared'), 'D', take(parameters('hostingPlanSku'), 1))]",
    "useFrontDoor": "[equals(parameters('customDomainOption'), 'Azure Front Door')]",
    "frontDoorName": "[parameters('baseResourceName')]",
    "frontDoorDomain": "[toLower(concat(variables('frontDoorName'), '.azurefd.net'))]",
    "ProactivelyInstallUserApp": "[parameters('ProactivelyInstallUserApp')]",
    "UserAppExternalId": "[parameters('UserAppExternalId')]",
    "i18n:DefaultCulture": "[parameters('DefaultCulture')]",
    "i18n:SupportedCultures": "[parameters('SupportedCultures')]",
    "sendFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/sendFunctionPackage.zip')]",
    "dataFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/dataFunctionPackage.zip')]",
    "prepFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/prepFunctionPackage.zip')]",
    "botAppPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/botAppPackage.zip')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-06-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      },
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      },
      "sku": {
        "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'), '1'), concat(variables('skuFamily'), parameters('hostingPlanSize')))]",
        "tier": "[parameters('hostingPlanSku')]",
        "size": "[concat(variables('skuFamily'), parameters('hostingPlanSize'))]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('botAppName')]",
      "location": "[parameters('location')]",
      "kind": "app",
      "properties": {
        "name": "[variables('botAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "PROJECT",
              "value": "Source/CompanyCommunicator/Microsoft.Teams.Apps.CompanyCommunicator.csproj"
            },
            {
              "name": "SITE_ROLE",
              "value": "app"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "ProactivelyInstallUserApp",
              "value": "[variables('ProactivelyInstallUserApp')]"
            },
            {
              "name": "UserAppExternalId",
              "value": "[variables('UserAppExternalId')]"
            },
            {
              "name": "AzureAd:TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "AzureAd:ClientId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AzureAd:ClientSecret",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "AzureAd:ApplicationIdURI",
              "value": "[if(variables('useFrontDoor'), concat('api://', variables('frontDoorDomain')), '')]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            },
            {
              "name": "AllowedTenants",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "DisableTenantFilter",
              "value": "false"
            },
            {
              "name": "AuthorizedCreatorUpns",
              "value": "[parameters('senderUPNList')]"
            },
            {
              "name": "DisableAuthentication",
              "value": "false"
            },
            {
              "name": "DisableCreatorUpnCheck",
              "value": "false"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.15.2"
            }
          ],
          "cors": {
            "supportCredentials": true,
            "allowedOrigins": [
              "[concat('https://', variables('frontDoorDomain'))]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]",
        "[resourceId('Microsoft.Web/sites', variables('prepFunctionAppName'))]",
        "[resourceId('Microsoft.Web/sites', variables('sendFunctionAppName'))]",
        "[resourceId('Microsoft.Web/sites', variables('dataFunctionAppName'))]"
      ],      
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('botAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('botAppPackageURL')]"
          }
        }
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('authorBotName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[concat(parameters('appDisplayName'),'-author')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('authorClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages/author')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('authorBotName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('authorBotName'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('botName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[parameters('appDisplayName')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('userClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages/user')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[variables('serviceBusNamespaceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "resources": [
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusSendQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusDataQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusPrepareToSendQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusExportQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('prepFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('prepFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "ProactivelyInstallUserApp",
              "value": "[variables('ProactivelyInstallUserApp')]"
            },
            {
              "name": "UserAppExternalId",
              "value": "[variables('UserAppExternalId')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('prepFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],     
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('prepFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('prepFunctionPackageURL')]"
          }
        }
      ] 
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('sendFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('sendFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('sendFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "MaxNumberOfAttempts",
              "value": "5"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],      
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('sendFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('sendFunctionPackageURL')]"
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('dataFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('dataFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('dataFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "CleanUpScheduleTriggerTime",
              "value": "30 23 * * *"
            },
            {
              "name": "CleanUpFile",
              "value": "1"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('dataFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('dataFunctionPackageURL')]"
          }
        }
      ]      
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/frontDoors",
      "name": "[variables('frontDoorName')]",
      "condition": "[variables('useFrontDoor')]",
      "location": "Global",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
      ],
      "properties": {
        "backendPools": [
          {
            "name": "backendPool1",
            "properties": {
              "backends": [
                {
                  "address": "[variables('botAppDomain')]",
                  "backendHostHeader": "[variables('botAppDomain')]",
                  "httpPort": 80,
                  "httpsPort": 443,
                  "priority": 1,
                  "weight": 50,
                  "enabledState": "Enabled"
                }
              ],
              "healthProbeSettings": {
                "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', variables('frontDoorName'), 'healthProbeSettings1')]"
              },
              "loadBalancingSettings": {
                "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', variables('frontDoorName'), 'loadBalancingSettings1')]"
              },
              "resourceState": "Enabled"
            }
          }
        ],
        "healthProbeSettings": [
          {
            "name": "healthProbeSettings1",
            "properties": {
              "intervalInSeconds": 255,
              "path": "/health",
              "protocol": "Https",
              "resourceState": "Enabled"
            }
          }
        ],
        "frontendEndpoints": [
          {
            "name": "frontendEndpoint1",
            "properties": {
              "hostName": "[variables('frontDoorDomain')]",
              "sessionAffinityEnabledState": "Disabled",
              "sessionAffinityTtlSeconds": 0
            }
          }
        ],
        "loadBalancingSettings": [
          {
            "name": "loadBalancingSettings1",
            "properties": {
              "additionalLatencyMilliseconds": 0,
              "sampleSize": 4,
              "successfulSamplesRequired": 2
            }
          }
        ],
        "routingRules": [
          {
            "name": "routingRule1",
            "properties": {
              "frontendEndpoints": [
                {
                  "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', variables('frontDoorName'), 'frontendEndpoint1')]"
                }
              ],
              "acceptedProtocols": [
                "Https"
              ],
              "patternsToMatch": [
                "/*"
              ],
              "routeConfiguration": {
                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                "forwardingProtocol": "HttpsOnly",
                "backendPool": {
                  "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', variables('frontDoorName'), 'backendPool1')]"
                }
              },
              "enabledState": "Enabled"
            }
          },
          {
            "name": "routingRule2",
            "properties": {
              "frontendEndpoints": [
                {
                  "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', variables('frontDoorName'), 'frontendEndpoint1')]"
                }
              ],
              "acceptedProtocols": [
                "Https"
              ],
              "patternsToMatch": [
                "/api/*"
              ],
              "routeConfiguration": {
                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration",
                "customFragment": null,
                "customHost": "[variables('botAppDomain')]",
                "customPath": "",
                "redirectProtocol": "HttpsOnly",
                "customQueryString": null,
                "redirectType": "PermanentRedirect"
              },
              "enabledState": "Enabled"
            }
          }
        ],
        "enabledState": "Enabled",
        "friendlyName": "[variables('frontDoorName')]"
      }
    }
  ],
  "outputs": {
    "authorBotId": {
      "type": "string",
      "value": "[parameters('authorClientId')]"
    },
    "userBotId": {
      "type": "string",
      "value": "[parameters('userClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[if(variables('useFrontDoor'), variables('frontDoorDomain'), concat('Please create a custom domain name for ', variables('botAppDomain'), ' and use that in the manifest'))]"
    }
  }
}
